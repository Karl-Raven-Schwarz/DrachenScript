expr            : KEYWORD : VAR IDENTIFIER EQUAL expr
                : comp-expr ((KEYWORD : AND | KEYWORD : OR) comp-expr)*
                
comp-expr       : NOT comp-expr
                : arith-expr ((EE | LT | GT | LTE | GTE) arith-expr)*

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : atom (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|IDENTIFIER
                : LPAREN expr RPAREN
                : if-expr
                : for-expr
                : while-expr
                : func-def

if-expr         : KEYWORD : IF expr KEYWORD : ':' expr
                 (KEYWORD : ELIF expr KEYWORD : ':' expr)*
                 (KEYWORD : ELSE expr)?

for-expr        : KEYWORD : FOR IDENTIFIER EQ expr KEYWORD : TO expr
                 (KEYWORD : STEP expr)? KEYWORD : ':' expr

while-expr      : KEYWORD : WHILE expr KEYWORD : ':' expr

func-def        : KEYWORD FUNC IDENTIFIER?
                 LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                 ARRPW expr